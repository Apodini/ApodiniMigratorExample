{
    "summary": "A summary of what changed between versions",
    "document-id": "81ACD483-5D01-4BD9-B6D2-E64969488445",
    "version": "2.0.0",
    "from": "v_1.0.0",
    "to": "v_2.0.0",
    "compare-config": {
        "include-provider-support": false,
        "allowed-endpoint-id-update": false,
        "allowed-type-rename": false,
        "encoderConfiguration": {
            "dateEncodingStrategy": "deferredToDate",
            "dataEncodingStrategy": "base64"
        }
    },
    "serviceChanges": [
        {
            "type": "update",
            "id": "SERVICE_INFO_ID",
            "updated": {
                "type": "version",
                "from": "v_1.0.0",
                "to": "v_2.0.0"
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "update",
            "id": "SERVICE_INFO_ID",
            "updated": {
                "type": "exporter",
                "exporter": {
                    "type": "update",
                    "id": "rest",
                    "updated": {
                        "from": {
                            "type": "rest",
                            "encoderConfiguration": {
                                "dateEncodingStrategy": "deferredToDate",
                                "dataEncodingStrategy": "base64"
                            },
                            "decoderConfiguration": {
                                "dateDecodingStrategy": "deferredToDate",
                                "dataDecodingStrategy": "deferredToData"
                            },
                            "caseInsensitiveRouting": false
                        },
                        "to": {
                            "type": "rest",
                            "encoderConfiguration": {
                                "dateEncodingStrategy": "deferredToDate",
                                "dataEncodingStrategy": "base64"
                            },
                            "decoderConfiguration": {
                                "dateDecodingStrategy": "deferredToDate",
                                "dataDecodingStrategy": "deferredToData"
                            },
                            "caseInsensitiveRouting": false
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "SERVICE_INFO_ID",
            "updated": {
                "type": "exporter",
                "exporter": {
                    "type": "update",
                    "id": "grpc",
                    "updated": {
                        "from": {
                            "type": "grpc",
                            "packageName": "QONECTIQ",
                            "serviceName": "QONECTIQ",
                            "pathPrefix": "__grpc",
                            "reflectionEnabled": true
                        },
                        "to": {
                            "type": "grpc",
                            "packageName": "QONECTIQ2",
                            "serviceName": "QONECTIQ",
                            "pathPrefix": "__grpc",
                            "reflectionEnabled": true
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        }
    ],
    "modelChanges": [
        {
            "type": "removal",
            "id": "CategoryStatus",
            "breaking": false,
            "solvable": false
        },
        {
            "type": "addition",
            "id": "UserStatistic",
            "added": {
                "object": {
                    "typeName": {
                        "defined-in": "QONECTIQV2",
                        "rootComponent": {
                            "name": "UserStatistic"
                        }
                    },
                    "properties": [
                        {
                            "name": "userID",
                            "type": {
                                "scalar": "UUID"
                            }
                        },
                        {
                            "name": "participatingEventsCount",
                            "type": {
                                "scalar": "UInt"
                            }
                        },
                        {
                            "name": "createdEventsCount",
                            "type": {
                                "scalar": "UInt"
                            }
                        },
                        {
                            "name": "topCategory",
                            "type": {
                                "reference": "EventCategory"
                            }
                        },
                        {
                            "name": "registeredSince",
                            "type": {
                                "scalar": "Date"
                            }
                        },
                        {
                            "name": "badge",
                            "type": {
                                "reference": "UserBadge"
                            }
                        }
                    ]
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "EventCategoryMediator",
            "added": {
                "object": {
                    "typeName": {
                        "defined-in": "QONECTIQV2",
                        "rootComponent": {
                            "name": "EventCategoryMediator"
                        }
                    },
                    "properties": [
                        {
                            "name": "title",
                            "type": {
                                "scalar": "String"
                            }
                        },
                        {
                            "name": "categoryGroup",
                            "type": {
                                "reference": "EventCategoryGroup"
                            }
                        }
                    ]
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "UserBadge",
            "added": {
                "enum": {
                    "typeName": {
                        "defined-in": "QONECTIQV2",
                        "rootComponent": {
                            "name": "UserBadge"
                        }
                    },
                    "rawValueType": {
                        "scalar": "String"
                    },
                    "cases": [
                        {
                            "name": "newbie",
                            "rawValue": "newbie"
                        },
                        {
                            "name": "explorer",
                            "rawValue": "explorer"
                        },
                        {
                            "name": "achiever",
                            "rawValue": "achiever"
                        },
                        {
                            "name": "worldSaver",
                            "rawValue": "worldSaver"
                        }
                    ]
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "HomeFeedTheme",
            "added": {
                "enum": {
                    "typeName": {
                        "defined-in": "QONECTIQV2",
                        "rootComponent": {
                            "name": "HomeFeedTheme"
                        }
                    },
                    "rawValueType": {
                        "scalar": "String"
                    },
                    "cases": [
                        {
                            "name": "basic",
                            "rawValue": "basic"
                        },
                        {
                            "name": "classic",
                            "rawValue": "classic"
                        },
                        {
                            "name": "dark",
                            "rawValue": "dark"
                        },
                        {
                            "name": "midnight",
                            "rawValue": "midnight"
                        },
                        {
                            "name": "sunset",
                            "rawValue": "sunset"
                        }
                    ]
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "update",
            "id": "ReviewForm",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "rating",
                    "updated": {
                        "type": "type",
                        "from": {
                            "reference": "Rating"
                        },
                        "to": {
                            "reference": "Rating"
                        },
                        "forwardMigration": 0,
                        "backwardMigration": 1,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "HomeFeed",
            "updated": {
                "type": "property",
                "property": {
                    "type": "addition",
                    "id": "theme",
                    "added": {
                        "name": "theme",
                        "type": {
                            "reference": "HomeFeedTheme"
                        }
                    },
                    "defaultValue": 0,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "HomeFeed",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "events",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "HomeFeedEvent"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "HomeFeedEvent"
                            }
                        },
                        "forwardMigration": 2,
                        "backwardMigration": 3,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "HomeFeed",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "categories",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "HomeFeedCategory"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "HomeFeedCategory"
                            }
                        },
                        "forwardMigration": 4,
                        "backwardMigration": 5,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "UserLogin",
            "updated": {
                "type": "property",
                "property": {
                    "type": "idChange",
                    "from": "userName",
                    "to": "username",
                    "similarity": 0.950000,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Event",
            "updated": {
                "type": "property",
                "property": {
                    "type": "addition",
                    "id": "location",
                    "added": {
                        "name": "location",
                        "type": {
                            "scalar": "String"
                        }
                    },
                    "defaultValue": 1,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Event",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "maxParticipants",
                    "updated": {
                        "type": "necessity",
                        "from": "optional",
                        "to": "required",
                        "necessityMigration": 2
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Event",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "category",
                    "updated": {
                        "type": "type",
                        "from": {
                            "reference": "EventCategory"
                        },
                        "to": {
                            "reference": "EventCategory"
                        },
                        "forwardMigration": 6,
                        "backwardMigration": 7
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Event",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "reviews",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "Review"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "Review"
                            }
                        },
                        "forwardMigration": 8,
                        "backwardMigration": 9,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "HomeFeedEvent",
            "updated": {
                "type": "property",
                "property": {
                    "type": "idChange",
                    "from": "subtitle",
                    "to": "secondaryTitle",
                    "similarity": 0.634643,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "HomeFeedEvent",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "imageURL",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "URL"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 10,
                        "backwardMigration": 11
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Experience",
            "updated": {
                "type": "case",
                "case": {
                    "type": "addition",
                    "id": "unclassified",
                    "added": {
                        "name": "unclassified",
                        "rawValue": "unclassified"
                    },
                    "breaking": false,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "HomeFeedCategory",
            "updated": {
                "type": "property",
                "property": {
                    "type": "idChange",
                    "from": "eventsCount",
                    "to": "eventsAmount",
                    "similarity": 0.908485,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventCategory",
            "updated": {
                "type": "property",
                "property": {
                    "type": "removal",
                    "id": "status",
                    "fallbackValue": 3,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventCategory",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "group",
                    "updated": {
                        "type": "type",
                        "from": {
                            "reference": "EventCategoryGroup"
                        },
                        "to": {
                            "reference": "EventCategoryGroup"
                        },
                        "forwardMigration": 12,
                        "backwardMigration": 13,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Rating",
            "updated": {
                "type": "case",
                "case": {
                    "type": "idChange",
                    "from": "unacceptable",
                    "to": "terrible",
                    "similarity": 0.527778,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Rating",
            "updated": {
                "type": "case",
                "case": {
                    "type": "update",
                    "id": "unacceptable",
                    "updated": {
                        "type": "rawValue",
                        "from": "unacceptable",
                        "to": "terrible"
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Rating",
            "updated": {
                "type": "case",
                "case": {
                    "type": "removal",
                    "id": "undefined",
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "UserRegisterForm",
            "updated": {
                "type": "property",
                "property": {
                    "type": "idChange",
                    "from": "surname",
                    "to": "lastname",
                    "similarity": 0.713095,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "UserRegisterForm",
            "updated": {
                "type": "property",
                "property": {
                    "type": "addition",
                    "id": "preferredTheme",
                    "added": {
                        "name": "preferredTheme",
                        "type": {
                            "reference": "HomeFeedTheme"
                        }
                    },
                    "defaultValue": 4,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "idChange",
                    "from": "ownEvents",
                    "to": "myEvents",
                    "similarity": 0.750000,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "ownEvents",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "Event"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "Event"
                            }
                        },
                        "forwardMigration": 14,
                        "backwardMigration": 15,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "idChange",
                    "from": "eventsOfInterest",
                    "to": "interestedIn",
                    "similarity": 0.622685,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "eventsOfInterest",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "Event"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "Event"
                            }
                        },
                        "forwardMigration": 16,
                        "backwardMigration": 17,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "reviews",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "Review"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "Review"
                            }
                        },
                        "forwardMigration": 18,
                        "backwardMigration": 19,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "homeFeed",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "reference": "HomeFeed"
                            }
                        },
                        "to": {
                            "optional": {
                                "reference": "HomeFeed"
                            }
                        },
                        "forwardMigration": 20,
                        "backwardMigration": 21,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "experience",
                    "updated": {
                        "type": "type",
                        "from": {
                            "reference": "Experience"
                        },
                        "to": {
                            "reference": "Experience"
                        },
                        "forwardMigration": 22,
                        "backwardMigration": 23,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "User",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "participatingEvents",
                    "updated": {
                        "type": "type",
                        "from": {
                            "repeated": {
                                "reference": "Event"
                            }
                        },
                        "to": {
                            "repeated": {
                                "reference": "Event"
                            }
                        },
                        "forwardMigration": 24,
                        "backwardMigration": 25,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventCategoryGroup",
            "updated": {
                "type": "case",
                "case": {
                    "type": "idChange",
                    "from": "travellinng",
                    "to": "travel",
                    "similarity": 0.909091,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventCategoryGroup",
            "updated": {
                "type": "case",
                "case": {
                    "type": "update",
                    "id": "travellinng",
                    "updated": {
                        "type": "rawValue",
                        "from": "travellinng",
                        "to": "travel"
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventCategoryGroup",
            "updated": {
                "type": "case",
                "case": {
                    "type": "removal",
                    "id": "studying",
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventCategoryGroup",
            "updated": {
                "type": "case",
                "case": {
                    "type": "addition",
                    "id": "entertainment",
                    "added": {
                        "name": "entertainment",
                        "rawValue": "entertainment"
                    },
                    "breaking": false,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "EventMediator",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "maxParticipants",
                    "updated": {
                        "type": "necessity",
                        "from": "optional",
                        "to": "required",
                        "necessityMigration": 5
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Review",
            "updated": {
                "type": "property",
                "property": {
                    "type": "addition",
                    "id": "displayReviewerName",
                    "added": {
                        "name": "displayReviewerName",
                        "type": {
                            "scalar": "Bool"
                        }
                    },
                    "defaultValue": 6,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Review",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "rating",
                    "updated": {
                        "type": "type",
                        "from": {
                            "reference": "Rating"
                        },
                        "to": {
                            "reference": "Rating"
                        },
                        "forwardMigration": 26,
                        "backwardMigration": 27,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        }
    ],
    "endpointChanges": [
        {
            "type": "removal",
            "id": "usersOfExperience",
            "breaking": true,
            "solvable": false
        },
        {
            "type": "addition",
            "id": "searchEventsWithQuery",
            "added": {
                "deltaIdentifier": "searchEventsWithQuery",
                "identifiers": {
                    "EndpointPath": "/events/search",
                    "GRPCMethodName": "GetSearchEventsHandler",
                    "GRPCServiceName": "QONECTIQ",
                    "HandlerName": "SearchEventsHandler",
                    "Operation": "read"
                },
                "communicationalPattern": "requestResponse",
                "parameters": [
                    {
                        "name": "searchQuery",
                        "type": {
                            "scalar": "String"
                        },
                        "kind": "lightweight",
                        "necessity": "required"
                    }
                ],
                "response": {
                    "repeated": {
                        "reference": "Event"
                    }
                },
                "errors": [
                    {
                        "code": 401,
                        "message": "Unauthorized"
                    },
                    {
                        "code": 403,
                        "message": "Forbidden"
                    },
                    {
                        "code": 404,
                        "message": "Not found"
                    },
                    {
                        "code": 500,
                        "message": "Internal server error"
                    }
                ]
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "reviewsOfUserWithID",
            "added": {
                "deltaIdentifier": "reviewsOfUserWithID",
                "identifiers": {
                    "EndpointPath": "/reviews/posted-from",
                    "GRPCMethodName": "GetReviewsOfUserHandler",
                    "GRPCServiceName": "QONECTIQ",
                    "HandlerName": "ReviewsOfUserHandler",
                    "Operation": "read"
                },
                "communicationalPattern": "requestResponse",
                "parameters": [
                    {
                        "name": "userId",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "lightweight",
                        "necessity": "required"
                    }
                ],
                "response": {
                    "repeated": {
                        "reference": "Review"
                    }
                },
                "errors": [
                    {
                        "code": 401,
                        "message": "Unauthorized"
                    },
                    {
                        "code": 403,
                        "message": "Forbidden"
                    },
                    {
                        "code": 404,
                        "message": "Not found"
                    },
                    {
                        "code": 500,
                        "message": "Internal server error"
                    }
                ]
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "statisticsOfUser",
            "added": {
                "deltaIdentifier": "statisticsOfUser",
                "identifiers": {
                    "EndpointPath": "/users/{userIdentifier}/statistics",
                    "GRPCMethodName": "GetStatisticsHandler",
                    "GRPCServiceName": "QONECTIQ",
                    "HandlerName": "StatisticsHandler",
                    "Operation": "read"
                },
                "communicationalPattern": "requestResponse",
                "parameters": [
                    {
                        "name": "userIdentifier",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    }
                ],
                "response": {
                    "reference": "UserStatistic"
                },
                "errors": [
                    {
                        "code": 401,
                        "message": "Unauthorized"
                    },
                    {
                        "code": 403,
                        "message": "Forbidden"
                    },
                    {
                        "code": 404,
                        "message": "Not found"
                    },
                    {
                        "code": 500,
                        "message": "Internal server error"
                    }
                ]
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "update",
            "id": "createCategory",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "event",
                    "updated": {
                        "type": "type",
                        "from": {
                            "reference": "EventCategory"
                        },
                        "to": {
                            "reference": "EventCategoryMediator"
                        },
                        "forwardMigration": 28
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "addReviewToEvent",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "addition",
                    "id": "displayName",
                    "added": {
                        "name": "displayName",
                        "type": {
                            "scalar": "Bool"
                        },
                        "kind": "lightweight",
                        "necessity": "optional"
                    },
                    "breaking": false,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "addReviewToEvent",
            "updated": {
                "type": "response",
                "from": {
                    "reference": "Review"
                },
                "to": {
                    "reference": "ReviewForm"
                },
                "backwardsMigration": 29
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getParticipantsOfEventWithID",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "EndpointPath",
                    "updated": {
                        "from": {
                            "id": "EndpointPath",
                            "value": "/events/{eventID}/participants"
                        },
                        "to": {
                            "id": "EndpointPath",
                            "value": "/events/{eventIdentifier}/participants"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getParticipantsOfEventWithID",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "idChange",
                    "from": "eventID",
                    "to": "eventIdentifier",
                    "similarity": 0.818095,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "deleteEventWithID",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "EndpointPath",
                    "updated": {
                        "from": {
                            "id": "EndpointPath",
                            "value": "/events/{id}"
                        },
                        "to": {
                            "id": "EndpointPath",
                            "value": "/events/{identifier}"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "deleteEventWithID",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "idChange",
                    "from": "id",
                    "to": "identifier",
                    "similarity": 0.786667,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "getCategoriesOfGroup",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "EndpointPath",
                    "updated": {
                        "from": {
                            "id": "EndpointPath",
                            "value": "/categories/group/{groupCategory}"
                        },
                        "to": {
                            "id": "EndpointPath",
                            "value": "/categories/group"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getCategoriesOfGroup",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "idChange",
                    "from": "groupCategory",
                    "to": "group",
                    "similarity": 0.876923,
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "getCategoriesOfGroup",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "groupCategory",
                    "updated": {
                        "type": "parameterType",
                        "from": "path",
                        "to": "lightweight"
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "getCategoryWithID",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "EndpointPath",
                    "updated": {
                        "from": {
                            "id": "EndpointPath",
                            "value": "/categories/{id}"
                        },
                        "to": {
                            "id": "EndpointPath",
                            "value": "/category"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getCategoryWithID",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "parameterType",
                        "from": "path",
                        "to": "lightweight"
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "getReviewsOfEventWithID",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "addition",
                    "id": "ratingBetterThan",
                    "added": {
                        "name": "ratingBetterThan",
                        "type": {
                            "reference": "Rating"
                        },
                        "kind": "lightweight",
                        "necessity": "optional"
                    },
                    "breaking": false,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "getEventsOfCategory",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "GRPCMethodName",
                    "updated": {
                        "from": {
                            "id": "GRPCMethodName",
                            "value": "GetCategoryEventsHandler"
                        },
                        "to": {
                            "id": "GRPCMethodName",
                            "value": "CreateCategoryEventsHandler"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getEventsOfCategory",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "Operation",
                    "updated": {
                        "from": {
                            "id": "Operation",
                            "value": "read"
                        },
                        "to": {
                            "id": "Operation",
                            "value": "create"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getEventsOfCategory",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "group",
                    "updated": {
                        "type": "parameterType",
                        "from": "lightweight",
                        "to": "content"
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "getHomeFeedForUserWithID",
            "updated": {
                "type": "identifier",
                "identifier": {
                    "type": "update",
                    "id": "EndpointPath",
                    "updated": {
                        "from": {
                            "id": "EndpointPath",
                            "value": "/home-feed/{userID}"
                        },
                        "to": {
                            "id": "EndpointPath",
                            "value": "/home/{userID}"
                        }
                    },
                    "breaking": true,
                    "solvable": true
                }
            },
            "breaking": true,
            "solvable": true
        },
        {
            "type": "update",
            "id": "getHomeFeedForUserWithID",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "addition",
                    "id": "showPreviousEvents",
                    "added": {
                        "name": "showPreviousEvents",
                        "type": {
                            "scalar": "Bool"
                        },
                        "kind": "lightweight",
                        "necessity": "required"
                    },
                    "defaultValue": 7,
                    "breaking": true,
                    "solvable": true
                }
            }
        }
    ],
    "scripts": {
        "29": "function convert(to) {\n    let parsedTo = JSON.parse(to)\n    return JSON.stringify({'id': \"3094A055-CD80-4B23-B49B-9EA69864DC2B\", 'title': parsedTo.title, 'content': parsedTo.content, 'eventID': \"E987F238-AB6A-466C-B493-A83EF6DCCFB0\", 'reviewerID': \"950CAACE-00EB-4C4D-98C3-C600FAB31703\", 'summary': parsedTo.summary, 'rating': parsedTo.rating, 'displayReviewerName': false})\n}",
        "12": "function convert(ignoredFrom) {\n    return JSON.stringify(\"marketing\")\n}",
        "7": "function convert(to) {\n    let parsedTo = JSON.parse(to)\n    return JSON.stringify({'id': parsedTo.id, 'title': parsedTo.title, 'group': parsedTo.group})\n}",
        "10": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "18": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "21": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "23": "function convert(ignoredTo) {\n    return JSON.stringify(\"beginner\")\n}",
        "24": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "27": "function convert(ignoredTo) {\n    return JSON.stringify(\"outstanding\")\n}",
        "9": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "0": "function convert(ignoredFrom) {\n    return JSON.stringify(\"outstanding\")\n}",
        "14": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "13": "function convert(ignoredTo) {\n    return JSON.stringify(\"marketing\")\n}",
        "15": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "25": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "28": "function convert(from) {\n    let parsedFrom = JSON.parse(from)\n    return JSON.stringify({'title': parsedFrom.title, 'categoryGroup': \"marketing\"})\n}",
        "2": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "16": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "3": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "17": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "20": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "8": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "6": "function convert(from) {\n    let parsedFrom = JSON.parse(from)\n    return JSON.stringify({'id': parsedFrom.id, 'title': parsedFrom.title, 'group': parsedFrom.group})\n}",
        "11": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "26": "function convert(ignoredFrom) {\n    return JSON.stringify(\"outstanding\")\n}",
        "19": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "22": "function convert(ignoredFrom) {\n    return JSON.stringify(\"beginner\")\n}",
        "5": "function convert(ignoredTo) {\n    return JSON.stringify([])\n}",
        "4": "function convert(ignoredFrom) {\n    return JSON.stringify([])\n}",
        "1": "function convert(ignoredTo) {\n    return JSON.stringify(\"outstanding\")\n}"
    },
    "json-values": {
        "0": "\"basic\"",
        "6": "false",
        "3": "\"available\"",
        "5": "0",
        "7": "false",
        "4": "\"basic\"",
        "2": "0",
        "1": "\"\""
    },
    "updated-json-representations": {
        "QONECTIQV2.HomeFeedCategory": "{\n\"categoryID\" : \"79166FDE-6BF4-4684-BF86-9382F3592EFE\",\n\"eventsAmount\" : 0,\n\"imageURL\" : \"https://github.com/Apodini/Apodini\",\n\"title\" : \"\"\n}",
        "QONECTIQV2.User": "{\n\"birthday\" : 664801200,\n\"email\" : \"\",\n\"experience\" : \"beginner\",\n\"homeFeed\" : null,\n\"id\" : \"EAB99AA0-9F25-47FA-A5CE-2173DA9DF428\",\n\"interestedIn\" : [],\n\"myEvents\" : [],\n\"name\" : \"\",\n\"participatingEvents\" : [],\n\"password\" : \"\",\n\"reviews\" : [],\n\"subscribedToNewsLetter\" : false,\n\"surname\" : \"\"\n}",
        "QONECTIQV2.ReviewForm": "{\n\"content\" : \"\",\n\"rating\" : \"outstanding\",\n\"summary\" : \"\",\n\"title\" : \"\"\n}",
        "QONECTIQV2.Event": "{\n\"category\" : {\n\"group\" : \"marketing\",\n\"id\" : \"3E3CADE5-DC19-4E07-A249-69FE315B74A2\",\n\"title\" : \"\"\n},\n\"date\" : 664801200,\n\"duration\" : 0,\n\"id\" : \"DF61961F-FADA-425D-90E0-0DF4D917661B\",\n\"imagePath\" : \"https://github.com/Apodini/Apodini\",\n\"location\" : \"\",\n\"maxParticipants\" : 0,\n\"organizer\" : \"57B6DC2A-6F0C-45B7-B35D-605B4E59A5A5\",\n\"reviews\" : [],\n\"summary\" : \"\",\n\"tags\" : [],\n\"title\" : \"\"\n}",
        "QONECTIQV2.EventCategory": "{\n\"group\" : \"marketing\",\n\"id\" : \"5A351DEB-6BA5-4210-A153-4F6E73ED3EBF\",\n\"title\" : \"\"\n}",
        "QONECTIQV2.Review": "{\n\"content\" : \"\",\n\"displayReviewerName\" : false,\n\"eventID\" : \"CFC2C2E4-95C4-43FE-BB6C-35C7D373D672\",\n\"id\" : \"1664A5E0-0875-42D7-BBA0-F401B4C60CB6\",\n\"rating\" : \"outstanding\",\n\"reviewerID\" : \"8A4947A9-0517-4211-965C-795D0D250734\",\n\"summary\" : \"\",\n\"title\" : \"\"\n}",
        "QONECTIQV2.EventMediator": "{\n\"date\" : null,\n\"duration\" : null,\n\"maxParticipants\" : 0\n}",
        "QONECTIQV2.HomeFeedEvent": "{\n\"eventID\" : \"33EFADC7-9DF5-4F6C-B00D-6440B23491DC\",\n\"eventsCount\" : 0,\n\"imageURL\" : \"\",\n\"secondaryTitle\" : \"\",\n\"title\" : \"\"\n}",
        "QONECTIQV2.HomeFeed": "{\n\"categories\" : [],\n\"events\" : [],\n\"greeting\" : \"\",\n\"id\" : \"60A57740-6C6D-4518-BD4C-FDF92EDAE6F6\",\n\"searchBarText\" : \"\",\n\"subtitle\" : \"\",\n\"theme\" : \"basic\",\n\"userID\" : \"B3F87B77-CB0D-47C6-8A0A-2658B87F2FD8\"\n}",
        "QONECTIQV2.UserRegisterForm": "{\n\"birthday\" : 664801200,\n\"email\" : \"\",\n\"lastname\" : \"\",\n\"name\" : \"\",\n\"password\" : \"\",\n\"preferredTheme\" : \"basic\",\n\"subscribedToNewsLetter\" : false\n}",
        "QONECTIQV2.UserLogin": "{\n\"password\" : \"\",\n\"username\" : \"\"\n}"
    }
}